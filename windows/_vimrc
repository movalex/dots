autocmd FileType python map <buffer> <F5> :w<CR>:exec '!python' shellescape(@%, 1)<CR>

autocmd BufNewFile,BufRead *.yml set tabstop=2
autocmd BufNewFile,BufRead *.fuse set filetype=lua
autocmd BufNewFile,BufRead *.comp set filetype=lua
autocmd BufNewFile,BufRead *.fu set filetype=lua
autocmd BufNewFile,BufRead *.layout set filetype=lua
autocmd BufNewFile,BufRead *.atom set filetype=lua
autocmd BufNewFile,BufRead *.scriptlib set filetype=lua
autocmd BufNewFile,BufRead *.eyeonscript set filetype=lua

au BufRead,BufNewFile *.md setlocal textwidth=40

nmap <F11> :!start explorer /e,%:p:h<CR>

colorscheme atom-dark-256

autocmd Syntax * call SyntaxRange#Include('//begin=glsl//', '//end=glsl//', 'glsl', 'NonText')
autocmd Syntax * call SyntaxRange#Include('--begin=lua--', '--end=lua--', 'lua', 'NonText')

set noerrorbells visualbell t_vb=

if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

set clipboard^=unnamed,unnamedplus


" lyrics

autocmd BufNewFile,BufRead,Filetype *.txt call SetLyricsOptions()
function SetLyricsOptions()
    set scrollbind
    set cursorline
    set cursorbind
endfunction

function UnsetLyricsOptions()
    set noscrollbind
    set nocursorline
    set nocursorbind
endfunction


" python syntax highlighting
let g:python_highlight_all = 1

" activate virtualenv
" If the appropriate environment variables are set this will automatically use
" the virtualenv's python within vim thus enabling omnicomplete.
let g:virtualenv_auto_activate = 1

if has("clipboard")
    " CTRL-X and SHIFT-Del are Cut
    vnoremap <C-X> "+x
    " vnoremap <S-Del> "+x
    " CTRL-C and CTRL-Insert are Copy
    vnoremap <C-C> "+y
    " vnoremap <C-Insert> "+y
    " CTRL-V and SHIFT-Insert are Paste
    map <C-V>		"+gP
    " map <S-Insert>		"+gP
    inoremap <ESC><C-V> "+gP
    cmap <C-V>		<C-R>+
    " cmap <S-Insert>		<C-R>+
endif

if 1
    exe 'inoremap <script> <C-V> <C-G>u' . paste#paste_cmd['i']
    exe 'vnoremap <script> <C-V> ' . paste#paste_cmd['v']
endif

imap <S-Insert>		<C-V>
vmap <S-Insert>		<C-V>

" save ctrl+s
noremap <C-S>		:update<CR>
vnoremap <C-S>		<C-C>:update<CR>
inoremap <C-S>		<Esc>:update<CR>gi

" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q>		<C-V>

set nu
set formatoptions-=t
set autochdir
set guifont=Fira\ Code:h11
set linespace=6
set lines=35 columns=140
set guioptions-=T "remove toolbar"
set guioptions-=r "remove scrollbar"
set guioptions-=L "remove scrollbar"
set guioptions-=m "remove menu
set encoding=utf-8
set fileencoding=utf-8
set noswapfile
" set nobackup
set backupdir=~/tmp
set noundofile
set wrap
set wrapmargin=0
set linebreak
" ---------------------------------------------------
" configure editor with tabs and nice stuff...
" ---------------------------------------------------
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set textwidth=120
nnoremap n nzzzv
nnoremap N Nzzzv

"--------- switch windows  -----------"
nnoremap <C-right> <c-w>l
nnoremap <C-left>  <c-w>h
nnoremap <C-up>    <c-w>k
nnoremap <C-down>  <c-w>j
imap <C-right> <ESC><c-w>l
imap <C-left>  <ESC><c-w>h
imap <C-up>    <ESC><c-w>k
imap <C-down>  <ESC><c-w>j

" make backspaces more powerfull
set backspace=indent,eol,start

" --------- replace all  -----------

set ignorecase
set cmdheight=1
set hlsearch
set incsearch
set encoding=utf8
" ---------russian-----------
set keymap=russian-jcukenwin

" instead Ctrl-^ use Ctrl-L
inoremap <C-l> <C-^> 

" change cursor color
highlight lCursor guifg=NONE guibg=Cyan 

set iminsert=0                  " default english keyboard
set imsearch=0                  " default english search

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'

call plug#begin('$HOME/vimfiles/plugged')

" Plug 'cakebaker/scss-syntax.vim'
" Plug 'chrisbra/Colorizer'
" Plug 'henrik/vim-reveal-in-finder'
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
" Plug 'JamshedVesuna/vim-markdown-preview'
" Plug 'kurocode25/mdforvim'
" Plug 'lepture/vim-jinja'
" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
" Plug 'python-mode/python-mode'
" Plug 'Scuilion/markdown-drawer'
" Plug 'severin-lemaignan/vim-minimap'
" Plug 'thaerkh/vim-workspace'
" Plug 'udalov/kotlin-vim'
" Plug 'vim-airline/vim-airline-themes'
" Plug 'airblade/vim-gitgutter'
" Plug 'fisadev/vim-isort'
" Plug 'mg979/vim-visual-multi', {'branch': 'master'}

Plug 'andrejlevkovitch/vim-lua-format'
Plug 'Asheq/close-buffers.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dbarsam/vim-maxscript'
Plug 'Galicarnax/vim-regex-syntax'
Plug 'honza/vim-snippets'
Plug 'inkarkat/vim-SyntaxRange'
Plug 'jiangmiao/auto-pairs'
Plug 'jmcantrell/vim-virtualenv'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/gv.vim'
Plug 'movalex/vim-dctl'
Plug 'PProvost/vim-ps1'
Plug 'psf/black', {'branch': 'main'}
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'unkiwii/vim-nerdtree-sync'
Plug 'vim-python/python-syntax'
Plug 'vim-scripts/AutoClose'
Plug 'wakatime/vim-wakatime'
Plug 'ycm-core/YouCompleteMe'

" Initialize plugin system
call plug#end()

" markdown preview
" let vim_markdown_preview_hotkey='<C-m>'

filetype on
filetype plugin indent on
set nofoldenable    " disable folding

let mapleader = ','

"search-replace current word
nnoremap <Leader>g :%s/\<<C-r><C-w>\>/


"------------ plugins settings --------------"

"------------ CTRL P -------------"
if executable('ag')
  let g:ctrlp_user_command = 'ag %s --nocolor -g ""'
endif
" ctrlp ignore .git
let g:ctrlp_custom_ignore = {
  \ 'dir': 'node_modules\|DS_Store\|.git'
  \ }
" ctrlp start in MRU
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_working_path_mode = 'r'
" ctrlp help 
" helptags ~/.vim/bundle/ctrlp.vim/doc

"-------------------ultisnips-----------------"
" UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
let g:UltiSnipsListSnippets="<c-s-tab>"
let g:UltiSnipsUsePythonVersion=3


" set pythonthreedll=C:\Users\videopro\AppData\Local\Programs\Python\Python310\python310.dll

"--------- YCM completer ----------"

let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_semantic_triggers = {
            \ 'python': ['re!\w{2}']
            \ }

" ---------nerd commenter optaons-----------
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCustomDelimiters = {
      \ 'python': { 'left': '#', 'right': '' }
      \ }
let g:NERDCompactSexyComs = 1
nmap <C-_> <leader>c<Space>
vmap <C-_> <leader>c<Space>

"------------ NerdTREE ---------- "
 
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let NERDDefaultAlign = 'left'
let g:NERDCustomDelimiters = {
      \ 'python': { 'left': '#', 'right': '' }
      \ }
let NERDTreeIgnore = [
            \ '\.DS_Store$',
            \ '.git',
            \ '__pycache__',
            \ '__pycache__',
            \ '.ropeproject'
            \ ]
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeWinSize = 28     
let NERDTreeQuitOpen = 1
let NERDTreeAutoDeleteBuffer = 0            "detele buffer of deleted file
"--------- autoclose if NT is the last window -----------
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"--------- prettify nerdtree -----------
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" ---------toggle nerdtree-----------
map <F6> :NERDTreeToggle<CR>

" Swap two words
nmap <silent> gw :s/\v(.*)(\s+)(.*)/\3\2\1/<CR> :noh <CR>


" ---------toggle relative numbering-----------

function! g:ToggleNuMode()
  if (&rnu == 1)
     set nornu
  else
    set rnu
  endif
endfunction
nnoremap <C-l> :call g:ToggleNuMode()<cr>

" do not comment inserted line
set formatoptions-=r
set formatoptions-=o

"resets the _last search pattern_ register by hitting return
nmap <cr> :noh<cr>
" source $VIMRUNTIME/mswin.vim
" behave mswin
set selection=inclusive
"set menu language
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
nmap <C-a> <A-a>
nmap <C-x> <A-x>
set langmenu=en_US
let $LANG = 'en_US'

" toggle spelling use ,s
nmap <Leader>l :setlocal spell! spelllang=ru_ru,en_us<CR>

" ---------trim spaces-----------
function! ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  " trigger ShowSpaces on/off:
  if a:0
   let &hlsearch=!&hlsearch
  else
   let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! TrimSpaces() range
   let oldhlsearch=ShowSpaces(1)
   execute a:firstline.",".a:lastline."substitute ///gec"
   let &hlsearch=oldhlsearch
endfunction

command! -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command! -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
nnoremap <F12> :ShowSpaces 1<CR>
nnoremap <S-F12> m`:TrimSpaces<CR>``
vnoremap <S-F12> :TrimSpaces<CR>

"-------------------statusline--------------------
set laststatus=2
set statusline=
set statusline+=%#PmenuSel#
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m\
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\] 
set statusline+=\ %p%%
set statusline+=\ %l:%c

" ---------move lines schortcuts-----------
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
" inoremap <A-j> <Esc>:m .+1<CR>==gi
" inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv


